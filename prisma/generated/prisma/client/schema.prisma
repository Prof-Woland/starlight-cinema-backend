// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
  output        = "generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Categories {
  STORE_AND_HOUSEHOLD
  COSMETICS
  TRANSPORT
  HOUSING_AND_COMMUNAL_SERVICES
  HEALTH
  INTERNET
  HOBBY
  LOANS
  CLOTH
  UNFORESSEN_EXPENSES
  AIRBAG
  ADDITIONAL_EXPENSES
}

model User {
  id String @id @unique @default(uuid())

  login    String @unique()
  password String

  goals  Goal[]
  plans  Plan[]
  // tokens Auth?
  avatar Avatar?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Goal {
  id String @id @unique @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title      String
  date       String
  savedMoney Float  @default(0) @map("saved_money")
  allMoney   Float  @map("all_money")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("goals")
}

model Plan {
  id String @id @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title      String
  date       String
  spentMoney Float  @default(0) @map("spent_money")
  limitMoney Float  @map("limit_money")
  remainder  Float

  analysis        String
  recommendations String[]

  budgetPlan Json

  term String

  expenses Expenses[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Avatar {
  id     String @id @unique @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  avatarPath String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Expenses {
  id String @id @unique @default(uuid())

  planId String @map("plan_id")
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  category String
  expense  Decimal

  createdAt DateTime @default(now()) @map("created_at")
}
